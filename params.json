{"name":"Nitwit","tagline":"Scans Twitter or Github for available handles","body":"# nitwit v0.1.0\r\nScans Twitter or Github for available handles from a word list. Requires Python 2.x and <a href=\"http://docs.python-requests.org/en/latest/\">requests<a>.\r\n# Possibilities\r\nSearch for \"TheReal\" + top 100 most-followed Twitter handles:\r\n```\r\ncurl -vs \"http://twittercounter.com/pages/100\" 2>&1 \\\r\n    | grep \"analytics.track('Viewed Profile'\" \\\r\n    | awk -F 'href' '{print $2}'\\\r\n    | awk -F '\"' '{print $2}' \\\r\n    | cut -c 2- \\\r\n    | uniq \\\r\n    | awk '{ print \"TheReal\" $0 }' \\\r\n    | python nitwit.py -d - >nitwits.txt\r\n```\r\n5x (mutate one letter of each of the top 100 most-followed Twitter handles at random and check availability):\r\n```\r\ncurl -vs \"http://twittercounter.com/pages/100\" 2>&1 \\\r\n    | grep \"analytics.track('Viewed Profile'\" \\\r\n    | awk -F 'href' '{print $2}'\\\r\n    | awk -F '\"' '{print $2}' \\\r\n    | cut -c 2- \\\r\n    | uniq \\\r\n    | python -c \\\r\n'import random\r\nimport sys\r\nimport string\r\nimport copy\r\nfor word in sys.stdin:\r\n    word = list(word.strip());\r\n    for i in xrange(5):\r\n        new_word = copy.deepcopy(word)\r\n        new_word[random.randint(0, len(new_word) - 1)] = \\\r\n            random.choice(string.ascii_lowercase)\r\n        print \"\".join(new_word)' \\\r\n    | python nitwit.py -d - >nitwits.txt\r\n```\r\nSearch for all three-letter Twitter handles in random order:\r\n```\r\nfor i in {a..z}{a..z}{a..z} \r\ndo\r\n    echo $i\r\ndone \\\r\n    | perl -MList::Util=shuffle -e 'print shuffle(<STDIN>);' \\\r\n    | python nitwit.py -d - >nitwits.txt\r\n```\r\nOutput only handles from `/usr/share/dict/words` that can be registered on both Twitter and Github:\r\n```\r\ncomm <(python nitwit.py -m no -g -s) <(python nitwit.py -m no -s)\r\n```\r\nCheck the Twitter handle `i` every five seconds and beep insistently when it's available:\r\n```\r\nwhile true\r\ndo\r\n    if [[ $(echo i | python nitwit.py -m no -d - -s) == \"i\" ]]; then\r\n        while true\r\n        do\r\n            tput bel\r\n            sleep 1\r\n        done\r\n    fi\r\n    sleep 5\r\ndone\r\n```\r\n# Usage details\r\nDisplay help:\r\n```\r\npython nitwit.py -h\r\n```\r\nSource Twitter search with `/usr/share/dict/words`, writing live stats to `stderr` and available handles to `nitwits.txt`:\r\n```\r\npython nitwit.py >nitwits.txt\r\n```\r\nSearch Github, not Twitter:\r\n```\r\npython nitwit.py -g >nitwits.txt\r\n```\r\nIf \"<tab>m\" follows a handle written to stdout, then while the handle has no account associated with it, Twitter/Github is currently blocking its registration. This could mean the handle will be available soon; it could also mean the handle is a reserved word.\r\n\r\nSearch only for handles that have no associated accounts:\r\n```\r\npython nitwit.py -m yes >nitwits.txt\r\n```\r\nSearch only for whether handles can be registered:\r\n```\r\npython nitwit.py -m no >nitwits.txt\r\n```\r\nSearch for words in `mydict.txt`, a text file with a single word per line, in random order:\r\n```\r\ncat mydict.txt \\\r\n    | perl -MList::Util=shuffle -e 'print shuffle(<STDIN>);' \\\r\n    | python nitwit.py -g -d - >nitwits.txt\r\n```\r\nUse proxy `P` (useful in conjunction with Tor if getting <a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_Error\">429</a>'d):\r\n```\r\npython nitwit.py -p P >nitwits.txt\r\n```\r\nAbove, `P` is, for example, `http://10.10.1.10:1080`.\r\n\r\nWait for 1.25 seconds between successive server requests:\r\n```\r\npython nitwit.py -w 1.25 >nitwits.txt\r\n```\r\nSuppress status messages written to stderr:\r\n```\r\npython nitwit.py -s >nitwits.txt\r\n```\r\n# License\r\nMIT. See `LICENSE` for details.\r\n\r\n# Disclaimer\r\nThe author is not responsible for misuse or abuse of this product by other users.\r\n","google":"UA-28011603-4","note":"Don't delete this file! It's used internally to help with page regeneration."}